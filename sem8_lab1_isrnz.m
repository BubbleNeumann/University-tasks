close all;
clear all;

disp("task 1");
% Создать матрицу x1 размерностью больше десяти, заполненную произвольными
% числами от нуля до единицы. Выделить в ней подматрицу x2 (5×5), в который будут
% храниться последние пять элементов x1 по строкам и столбцам.
x1 = rand(12);
x2 = x1(8:12, 8:12);
disp("x1:");
disp(rand(12));
disp("x2:");
disp(x1(8:12, 8:12));

disp(" ");
disp("task 2");
% Создать матрицу x1, заполненную произвольными числами от нуля до единицы.
% Создать вторую матрицу x2, в которой будут храниться четные строки первой матрицы.
% Создать третью матрицу x3, в которой будут храниться нечетные столбцы первой
% матрицы.
x1 = rand(5);
x2 = x1(2:2:end, :);
x3 = x1(:, 1:2:end);
disp("x1:");
disp(x1);
disp("x2 (четные строки матрицы x1):");
disp(x2);
disp("x3 (нечетные столбцы матрицы x1):");
disp(x3);

disp(" ");
disp("task 3");
% Создать вектор-строку x1, хранящую диапазон значений от -1 до 1 с его
% разбиением на 100 элементов. Занулить в нем элементы меньшие 0,5.
x1 = linspace(-1, 1, 100);
disp("x1 до зануления: ");
disp(x1);
x1(x1 < 0.5) = 0;
disp("x1 после зануления: ");
disp(x1);

disp(" ");
disp("task 4");
% Создать квадратные матрицы x1 и x2 одинакового размера, заполненные
% произвольными числами от нуля до единицы. Перемножить матрицы по правилам
% матричного умножения, затем перемножить поэлементно.
x1 = rand(2);
x2 = rand(2);
x3 = x1 * x2;
disp("x3 (матричное умножение: )");
disp(x3);
x4 = x1 .* x2;
disp("x4 (поэлементное умножение: )");
disp(x4);

disp(" ");
disp("task 5");
% Создать вектор-строку x1 и вектор-столбец x2 с одинаковым количеством
% элементов – случайных чисел от нуля до единицы. Перемножить вектора по правилам
% матричного умножения, затем перемножить их поэлементно.
x1 = rand(1, 5);
x2 = rand(5, 1);
disp(x1);
disp(x2);
disp("x3 (матричное умножение: )");
disp(x3);
x4 = x1 .* x2;
disp("x4 (поэлементное умножение: )");
disp(x4);


disp(" ");
disp("task 6");
% Создать матрицы x1 размером n×k и x2 размером k×m, где n, k, m –
% произвольные целые числа, заполнить обе матрицы произвольными числами от нуля до
% единицы. Создать матрицу x3, в которую записать результат перемножения матриц x1 и
% x2 по правилам матричного умножения. Реализовать алгоритм поэлементного нахождения
% отдельных элементов матрицы x3, сравнить производительность работы поэлементного
% алгоритма со стандартным перемножением средствами MATLAB.
n = 3;
k = 4;
m = 2;
x1 = rand(n, k);
x2 = rand(k, m);
disp("x1: ");
disp(x1);
disp("x2: ");
disp(x2);
tic;
x3 = x1 * x2;
t1 = toc;
disp("x3: ");
disp(x3);
tic;
x4 = zeros(n, m);
for i = 1:n
    for j = 1:m
        for l = 1:k
            x4(i, j) = x4(i, j) + x1(i, l) * x2(l, j);
        end
    end
end
t2 = toc;
disp("x4: ");
disp(x4);
fprintf("Время стандартного перемножения: %.4f секунд\n", t1);
fprintf("Время поэлементного перемножения: %.4f секунд\n", t2);

disp(" ");
disp("task 7");
% Создать вектор-строку x1, заполненную случайными числами от нуля до
% единицы. Создать второй вектор x2, в котором будет храниться разность элементов
% первого вектора: т.е. первый элемент x2 – это разность второго и первого элементов x1.
% Реализовать алгоритм поэлементного нахождения отдельных элементов x2, сравнить его
% производительность с векторизованным вариантом.
x1 = rand(1, 5);
function x2 = elem_diff(x1)
    x2 = zeros(1, length(x1)-1);
    for i = 1:length(x1)-1
        x2(i) = x1(i+1) - x1(i);
    end
end

tic;
x2 = elem_diff(x1);
t1 = toc;
tic;
x3 = diff(x1);
t2 = toc;
disp("x2: ");
disp(x2);
disp("x3: ");
disp(x3);
fprintf("Время поэлементного перемножения: %.4f секунд\n", t1);
fprintf("Время векторизированного перемножения: %.4f секунд\n", t2);

disp(" ");
disp("task 8");
% Создать матрицу x1, заполненную случайными числами от нуля до единицы.
% Создать вторую матрицу x2, в которой будет храниться разность строк первого вектора:
% т.е. первый элемент первой строки x2 – это разность первых элементов второй и первой
% строк x1. Создать третью матрицу x3, в которой будет храниться разность столбцов
% первого вектора: т.е. первый элемент первого столбца x3 – это разность первых элементов
% второго и первого столбцов x1.
x1 = rand(5);
x2 = diff(x1, 1, 1);
x3 = diff(x1, 1, 2);
disp("x1: ");
disp(x1);
disp("x2: ");
disp(x2);
disp("x3: ");
disp(x3);

disp(" ");
disp("task 9");
% Создать вектор-строку x1, заполненную случайными числами от нуля до
% единицы. Создать второй вектор x2, в котором будет храниться среднее значение от трех
% соседних элементов первого вектора: т.е. первый элемент x2 – это треть от суммы
% первого, второго и третьего элементов x1.
disp("x1: ");
x1 = rand(1, 5);
disp(x1);
x2 = (x1(1:end-2) + x1(2:end-1) + x1(3:end)) / 3;
disp("x2: ");
disp(x2)

disp(" ");
disp("task 10");
% Создать матрицу x1, заполненную случайными числами от нуля до единицы.
% Создать матрицу x2, в которой будут храниться только значения x1 меньшие 0,5.
x1 = rand(6);
x2 = x1;
x2 (x1 >= 0.5) = 0;
disp("x1: ");
disp(x1);
disp("x2: ");
disp(x2);

disp(" ");
disp("task 11");
% Создать матрицу x1, заполненную случайными числами от нуля до единицы.
% Создать матрицу x2, в которой будут храниться единицы на тех позициях, которым
% соответствуют значения x1 меньшие 0,5. Остальные элементы x2 должны быть равны
% нулю.
x1 = rand(5);
x2 = x1;
x2 (x1 < 0.5) = 1;
x2 (x1 >= 0.5) = 0;
disp("x1: ");
disp(x1);
disp("x2: ");
disp(x2);

disp(" ");
disp("task 12");
% Создать квадратную матрицу x1, элементы которой представляют собой
% расстояние от центра до края матрицы. Диапазон изменения по осям x и y – от минус
% единицы до плюс единицы.
x = linspace(-1, 1, 10);
y = linspace(-1, 1, 10);
[ x1, y1 ] = meshgrid(x, y);
dist = sqrt(x1.^2 + y1.^2);
disp(dist);

disp(" ");
disp("task 13");
% Создать вектор-строку x1, хранящую диапазон значений от -1 до 1 с его
% разбиением на 1000 элементов. Создать вектор-строку x2, хранящую значение синуса от
% соответствующего элемента x1. Построить график. Создать вектор-строку x3, хранящую
% значение косинуса от соответствующего элемента x1. Добавить x3 на график.
x1 = linspace(-1, 1, 1000);
x2 = sin(x1);
x3 = cos(x1);
figure(1);
plot(x1, x2, 'b-')
hold on;
plot(x1, x3, 'r-')
xlabel("x")
ylabel("y")
title("График синуса и косинуса")
legend("sin(x)", "cos(x)")
disp("График был создан.");


disp(" ");
disp("task 14");
% Создать вектор-строку x1, хранящую диапазон значений от -1 до 1 с его
% разбиением на 1000 элементов. Создать вектор-строку x2, хранящую значения синуса от
% соответствующего элемента x1. Реализовать алгоритм поэлементного нахождения
% отдельных элементов x2, сравнить производительность работы поэлементного алгоритма
% с векторизованным.
x1 = linspace(-1, 1, 1000);
x2 = ones(1, length(x1));
tic
for i = 1:1000
    x2(i) = sin(x1(i));
end
t1 = toc;
tic
x2 = sin(x1);
t2 = toc;
fprintf("Поэлементный подход: %f сек.\n", t1);
fprintf("Векторизованный подход: %f сек.\n", t2);


disp(" ");
disp("task 15");
% Создать вектор-строку x1, заполненную случайными числами от нуля до
% единицы. Найти сумму всех элементов x1. Реализовать алгоритм поэлементного
% нахождения суммы, сравнить производительность работы поэлементного алгоритма со
% встроенной функцией.
x1 = rand(1, 10);
s1 = 0;
tic;
for i = 1:10
  s1 = s1 + x1(i);
end;
t1 = toc;
tic;
s2 = sum(x1);
t2 = toc;
disp(s1);
disp(s2);
fprintf("Поэлементный подход: %f сек.\n", t1);
fprintf("Векторизованный подход: %f сек.\n", t2);


disp(" ");
disp("task 16");
% Создать вектор-строку x1, хранящую диапазон значений от -1 до 1 с его
% разбиением на 100 элементов, и вектор-строку x2, хранящую диапазон значений от -10 до
% 10 с таким же разбиением на 100 элементов. Создать вектор-строку x3, в котором
% хранится произведение значений синуса от x1 на значения косинуса от x2. Построить
% график x3.
x1 = linspace(-1, 1, 100);
x2 = linspace(-10, 10, 100);
x3 = sin(x1) .* cos(x2);
figure(2);
plot(x3);
xlabel("x");
ylabel("y");
title("График произведения синуса и косинуса");
legend("sin(x1) * cos(x2)");
disp("График был создан.");


disp(" ");
disp("task 17");
% Создать матрицу x1, заполненную случайными комплексными числами от нуля
% до 1+1i. Создать матрицы x2 и x3, хранящие модуль и фазу чисел из x1.
x1 = rand(4) + 1i*rand(4);
x2 = abs(x1);
x3 = arg(x1);
disp("x1: ");
disp(x1);
disp("x2: ");
disp(x2);
disp("x3: ");
disp(x3);


disp(" ");
disp("task 18");
% Создать квадратную матрицу x1, элементы которой представляют собой
% расстояние от центра до края матрицы. Диапазон изменения по осям x и y – от минус
% единицы до плюс единицы. Создать вторую матрицу, в которую записать значения exp(-
% x1.*x1/0.125). Визуализировать с помощью функции imagesc().
x = linspace(-1, 1, 10);
y = linspace(-1, 1, 10);
[ x, y ] = meshgrid(x, y);
x1 = sqrt(x.^2 + y.^2);
x2 = exp(-x1.*x1/0.125);
figure(3);
imagesc(x2);
disp("График был создан.");


disp(" ");
disp("task 19");
% Создать квадратную матрицу 10×10 элементов, на главной диагонали которой
% располагаются элементы от одного до единицы. Остальные элементы нулевые.
x1 = zeros(10);
for i = 1:10
    x1(i, i) = i;
 end;
disp("x1: ");
disp(x1);
